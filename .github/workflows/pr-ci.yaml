name: PR to Dev Merge Check

on:
  workflow_call:

jobs:
  prepare-mergeTo-develop:
    runs-on: ubuntu-latest
    environment: 'dev'

    steps:
      # üì• Checkout the source code
      - uses: actions/checkout@v3

      # üì¶ Cache Maven dependencies to speed up builds
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # ‚òï Set up Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # üîê Create settings.xml for Maven with connected app credentials
      - name: Create settings.xml
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          servers: >
            [
              {
                "id": "anypoint-exchange-v3",
                "username": "~~~Client~~~",
                "password": "${{ secrets.CA_CLIENTID }}~?~${{ secrets.CA_CLIENTSECRET }}"
              }
            ]
          repositories: >
            [
              {
                "id": "MuleRepository",
                "name": "Mule Repository",
                "url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/",
                "releases": { "enabled": "true" },
                "snapshots": { "enabled": "false" }
              }
            ]

      # üì¶ Extract asset parameters from pom.xml (only for feature branches)
      - name: Extract asset parameters
        if: ${{ contains(github.head_ref, 'feature/') }}
        run: |
          groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          assetId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "assetGroup=$groupId" >> "$GITHUB_ENV"
          echo "assetId=$assetId" >> "$GITHUB_ENV"
          echo "assetVersion=$version" >> "$GITHUB_ENV"
          echo "group = $groupId, assetId = $assetId, version = $version"

      # üîç Check if asset already exists in Exchange (only for feature branches)
      - name: Check if asset exists
        if: ${{ contains(github.head_ref, 'feature/') }}
        run: |
          token=`curl -sb --location --request POST 'https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token' --header 'Content-Type: application/json' --data-raw '{"client_id": "${{ secrets.CA_CLIENTID }}", "client_secret": "${{ secrets.CA_CLIENTSECRET }}", "grant_type": "client_credentials"}' | jq -j '.access_token'`
          asset=`curl -sb --location --request POST 'https://anypoint.mulesoft.com/graph/api/v1/graphql' --header 'Content-Type: application/json' --header "Authorization: Bearer $token" --data-raw '{"query": "{assets(asset:{groupId:\"${{ env.assetGroup }}\", assetId:\"${{ env.assetId }}\", version:\"${{ env.assetVersion }}\"}){assetId version type}}"}'`
          echo "response = $asset"
          echo "assetresponse=$asset" >> "$GITHUB_ENV"

      # ‚ùå Fail build if asset already exists in Exchange (only for feature branches)
      - name: Throw error if asset exists
        if: ${{ contains(github.head_ref, 'feature/') && contains(env.assetresponse, 'assetId') }}
        run: |
          echo "::error file=pom.xml::Version already exists in Exchange. Please increase the version"
          exit 1